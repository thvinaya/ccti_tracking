name: Deploy ccti_tracking Lambda
on:
  push:
    branches:
        [main]
  
  workflow_dispatch:
   branches:
        [main,dev]

env:
  FUNCTION_NAME: ccti_tracking
  DEV_ALIAS: sandbox
  PROD_ALIAS : enterprise

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ccti_tracking Lambda Deployment Package
        run: |
          cd app
          zip -r9 lambda.zip .
          
      - name: Deploy ccti_tracking Lambda Function
        run: |
            function_version=$(aws lambda get-alias --function-name  ${{ env.FUNCTION_NAME }} --name ${{ env.DEV_ALIAS }} --query 'FunctionVersion' --output text)
            echo $function_version
            echo ${{github.ref_name}}
            if [ "${{github.ref_name}}" == "main" ]; then
              echo $function_version
              aws lambda update-alias \
              --function-name ${{ env.FUNCTION_NAME }} \
              --function-version  $function_version \
              --name ${{ env.PROD_ALIAS }} 
             
              
            elif ["${{github.ref}}" == "dev"]; then
              aws lambda update-alias \
              --function-name ${{ env.FUNCTION_NAME }} \
              --function-version $LATEST \
              --name ${{ env.DEV_ALIAS }}
              
             
            fi

            aws lambda update-function-code \
              --function-name ${{ env.FUNCTION_NAME }} \
              --zip-file fileb://app/lambda.zip
     
      - name: Wait for ccti_tracking Lambda function update to complete
        run: |
          while true; do
            status=$(aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} --query 'Configuration.LastUpdateStatus' --output text)
            if [ "$status" == "Successful" ]; then
              break
            elif [ "$status" == "Failed" ]; then
              exit 1
            fi
            sleep 10
          done
          aws lambda update-function-configuration \
            --function-name ${{ env.FUNCTION_NAME }} \
            --handler lambda_function.lambda_handler